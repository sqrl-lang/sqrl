# Basic event set up
LET EventData := input();
LET SqrlClock := TweetDate;
LET DatasetId := 1;

# Feature extraction from the Twitter data
LET TweetText := jsonValue(EventData, '$.data.text');
LET AuthorId := jsonValue(EventData, '$.data.author_id');
LET TweetId := jsonValue(EventData, '$.data.id');
LET TweetDate := jsonValue(EventData, '$.data.created_at');
LET Users := jsonValue(EventData, '$.includes.users');
LET AuthorUserData := first([It for It in Users where jsonValue(It, "$.id") = AuthorId]);
LET AuthorUsername := entity("User", jsonValue(AuthorUserData, "$.username"));
LET AuthorCreatedAt := jsonValue(AuthorUserData, "$.created_at");
LET AuthorName := jsonValue(AuthorUserData, "$.name");
LET AuthorProfileImageUrl := jsonValue(AuthorUserData, "$.profile_image_url");

# Simhash is a perceptual hash of text, such that similar text results in a similar hash
LET TweetTextSimhash := simhash(TweetText);

# Set up some counters
LET TweetsByUser := count(BY AuthorUsername TOTAL);
LET CountBySimhash := count(BY TweetTextSimhash LAST 1 HOUR);
LET UsersBySimhash := countUnique(AuthorUsername BY TweetTextSimhash LAST HOUR);

# Simple rule to make sure atleast one tweet shows up in the UI
LET IsFirstTweetSeen := NOT rateLimited(BY DatasetId MAX 1 EVERY YEARS);
CREATE RULE FirstTweetSeen WHERE IsFirstTweetSeen;

# Simple rules for too much similar text
CREATE RULE SimilarTweetText WHERE CountBySimhash>1 WITH REASON
    "Seen ${CountBySimhash} tweets with similar text";
CREATE RULE SameTweetMultipleUsers WHERE UsersBySimhash>1 WITH REASON
    "Seen ${UsersBySimhash} users tweeting similar text";

# This defines what gets "blocked" (i.e. displayed in the sidebar)
WHEN
    SimilarTweetText,
    SameTweetMultipleUsers,
    FirstTweetSeen
THEN blockTweet();

# Add some additional features if they are interesting
log("Seen %d tweets by user", TweetsByUser) WHERE TweetsByUser>1;