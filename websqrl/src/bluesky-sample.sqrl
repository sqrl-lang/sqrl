# Basic event set up. Read in EventData, and set the current clock time
# [NOTE] Features to not need to be defined in order (TweetDate is set lower down)
LET EventData := input();
LET SqrlClock := TweetDate;

# In production we used data sets to seperate counters and other variables
# from seperate runs. By changing the dataset number it automatically resets
# all counters to zero. Can be used for reprocessing and backtesting.
LET DatasetId := 1;

# [NOTE] === [NOTE]
# Turn this on if you want to use the *extremely basic* profanity filter
# [WARNING] The content with profanity is often NSFW
LET ProfanityFilterEnabled := false;

# Feature extraction from the Twitter data
LET Version := jsonValue(EventData, '$.v');
LET EventName := jsonValue(EventData, '$.eventName');
LET RecordType := jsonValue(EventData, '$.payload.record.$type');
LET AuthorId := jsonValue(EventData, '$.payload.author');
LET TweetText := jsonValue(EventData, '$.payload.record.text');
LET TweetId := jsonValue(EventData, '$.payload.cid');
# TODO(meyer) payload.record.createdAt is not available on all events
LET TweetDate := jsonValue(EventData, '$.timestamp');
LET SubjectCid := jsonValue(EventData, '$.payload.record.subject.cid');
LET Subject := jsonValue(EventData, '$.payload.record.subject');

# These features follow a standard naming scheme, and allow rules to be shared between
# multiple websites, in our case the Wikipedia and Twitter demos.
LET UserGeneratedContent := TweetText;

# Simhash is a perceptual hash of text, such that similar text results in a similar hash
LET TextSimhash := simhash(UserGeneratedContent);

# [EXAMPLE] This sets up some counters
# Easily defining counters like this is one of the powers of SQRL. These counters
# will automatically start at 0 when a new one is created. This requires a bit of
# forethought, but as long as rules deal with `greater than X` it works.
LET TweetsByUser := count(BY AuthorId, EventName TOTAL);
LET CountBySimhash := count(BY TextSimhash LAST 5 MINUTES);
LET UsersBySimhash := countUnique(AuthorId BY TextSimhash LAST 5 MINUTES);

# Simple rule to make sure atleast one tweet shows up in the UI
LET IsFirstTweetSeen := NOT rateLimited(BY DatasetId MAX 1 EVERY YEARS);
CREATE RULE FirstTweetSeen WHERE IsFirstTweetSeen WITH REASON
    "This is not a bad thing, just flagging this first tweet seen so there is output here. If you want more content you can turn on the profanity filter.";

# Simple rules for too much similar text
CREATE RULE SimilarTweetText WHERE CountBySimhash>2 WITH REASON
    "Seen ${CountBySimhash} tweets with similar text";
CREATE RULE SameTweetMultipleUsers WHERE UsersBySimhash>2 WITH REASON
    "Seen ${UsersBySimhash} users tweeting similar text";

# Flag any users using profanity
# [NOTE] Not a great spam rule!... but it's an easy demo
LET BadWordMatches := patternMatches("bad-words.txt", UserGeneratedContent);
CREATE RULE UsedBadWords WHERE ProfanityFilterEnabled AND BadWordMatches WITH REASON
    "Matched simple profanity filter: ${BadWordMatches}";

# This defines what gets shown in the sidebar
# At Twitter this might mean deleted tweets, suspending users, etc.
WHEN
    SimilarTweetText,
    SameTweetMultipleUsers,
    FirstTweetSeen,
    UsedBadWords
THEN showEvent();

# Add some additional features if they are interesting
log("Seen", TweetsByUser, EventName, "by user") WHERE TweetsByUser>1;
